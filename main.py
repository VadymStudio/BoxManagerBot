import logging
import os
import random
import sqlite3
import time
import asyncio
from flask import Flask, jsonify
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
try:
    Vadym_ID = int(os.getenv("Vadym_ID", 0))
    Nazar_ID = int(os.getenv("Nazar_ID", 0))
except (ValueError, TypeError) as e:
    logger.error(f"Error reading Vadym_ID or Nazar_ID: {e}")
    Vadym_ID, Nazar_ID = 0, 0
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///bot.db")

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN is not set")
    raise ValueError("TELEGRAM_TOKEN is required")

# –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤
ADMIN_IDS = [id for id in [Vadym_ID, Nazar_ID] if id != 0]
logger.info(f"ADMIN_IDS: {ADMIN_IDS}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask
app = Flask(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
class CharacterCreation(StatesGroup):
    awaiting_character_name = State()
    awaiting_fighter_type = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def init_db():
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        character_name TEXT UNIQUE,
        fighter_type TEXT
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS fighter_stats (
        user_id INTEGER PRIMARY KEY,
        fighter_type TEXT,
        stamina REAL,
        strength REAL,
        reaction REAL,
        health REAL,
        punch_speed REAL,
        will REAL,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS matches (
        match_id INTEGER PRIMARY KEY AUTOINCREMENT,
        player1_id INTEGER,
        player2_id INTEGER,
        status TEXT,
        start_time REAL,
        current_round INTEGER,
        player1_action TEXT,
        player2_action TEXT,
        player1_health REAL,
        player1_stamina REAL,
        player2_health REAL,
        player2_stamina REAL,
        action_deadline REAL,
        FOREIGN KEY (player1_id) REFERENCES users (user_id),
        FOREIGN KEY (player2_id) REFERENCES users (user_id)
    )""")
    conn.commit()
    conn.close()

init_db()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ maintenance mode
maintenance_mode = False

async def check_maintenance(message: types.Message):
    if maintenance_mode and message.from_user.id not in ADMIN_IDS:
        await message.reply("–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ä–æ–±–æ—Ç–∞—Ö. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        return False
    return True

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    logger.debug(f"Received /start from user {message.from_user.id}")
    user_id = message.from_user.id
    if not await check_maintenance(message):
        return
    await message.reply(
        "–í—ñ—Ç–∞—î–º–æ —É Box Manager Online! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /create_account, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç, –∞–±–æ /start_match, —â–æ–± –ø–æ—á–∞—Ç–∏ –±—ñ–π."
    )

# –ö–æ–º–∞–Ω–¥–∞ /create_account
@dp.message(Command("create_account"))
async def create_account(message: types.Message, state: FSMContext):
    logger.debug(f"Received /create_account from user {message.from_user.id}")
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if c.fetchone():
        await message.reply("–¢–∏ –≤–∂–µ –º–∞—î—à –∞–∫–∞—É–Ω—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /delete_account, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ.")
        conn.close()
        return
    conn.close()
    await message.reply("–í–≤–µ–¥–∏ —ñ–º'—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω—ñ–∫ —É –≥—Ä—ñ):")
    await state.set_state(CharacterCreation.awaiting_character_name)

# –û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@dp.message(CharacterCreation.awaiting_character_name)
async def handle_character_name(message: types.Message, state: FSMContext):
    logger.debug(f"Received text input from user {message.from_user.id}: {message.text}")
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    character_name = message.text.strip()
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT character_name FROM users WHERE character_name = ?", (character_name,))
    if c.fetchone():
        await message.reply("–¶–µ–π –Ω—ñ–∫ —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –í–∏–±–µ—Ä–∏ —ñ–Ω—à–∏–π.")
        conn.close()
        return
    try:
        c.execute(
            "INSERT INTO users (user_id, username, character_name) VALUES (?, ?, ?)",
            (user_id, message.from_user.username, character_name),
        )
        conn.commit()
        await state.update_data(character_name=character_name)
        fighter_descriptions = (
            "–í–∏–±–µ—Ä–∏ —Ç–∏–ø –±—ñ–π—Ü—è (–∑–º—ñ–Ω–∏—Ç–∏ –≤–∏–±—ñ—Ä –ø–æ—Ç—ñ–º –Ω–µ–º–æ–∂–ª–∏–≤–æ):\n\n"
            "üî• *Swarmer*: –ê–≥—Ä–µ—Å–∏–≤–Ω–∏–π –±–æ—î—Ü—å. –í–∏—Å–æ–∫–∞ —Å–∏–ª–∞ (1.5), –≤–æ–ª—è (1.5), —à–≤–∏–¥–∫—ñ—Å—Ç—å —É–¥–∞—Ä—É (1.35). –ó–¥–æ—Ä–æ–≤‚Äô—è: 120, –≤–∏–Ω–æ—Å–ª–∏–≤—ñ—Å—Ç—å: 1.1.\n"
            "ü•ä *Out-boxer*: –í–∏—Ç—Ä–∏–≤–∞–ª–∏–π —ñ —Ç–∞–∫—Ç–∏—á–Ω–∏–π. –í–∏—Å–æ–∫–∞ –≤–∏–Ω–æ—Å–ª–∏–≤—ñ—Å—Ç—å (1.5), –∑–¥–æ—Ä–æ–≤‚Äô—è (200). –°–∏–ª–∞: 1.15, –≤–æ–ª—è: 1.3.\n"
            "‚ö° *Counter-puncher*: –ú–∞–π—Å—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏. –í–∏—Å–æ–∫–∞ —Ä–µ–∞–∫—Ü—ñ—è (1.5), —à–≤–∏–¥–∫—ñ—Å—Ç—å —É–¥–∞—Ä—É (1.5). –°–∏–ª–∞: 1.25, –∑–¥–æ—Ä–æ–≤‚Äô—è: 100, –≤–æ–ª—è: 1.2."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("Swarmer", callback_data="swarmer")],
            [InlineKeyboardButton("Out-boxer", callback_data="out_boxer")],
            [InlineKeyboardButton("Counter-puncher", callback_data="counter_puncher")],
        ])
        await message.reply(fighter_descriptions, reply_markup=keyboard, parse_mode="Markdown")
        await state.set_state(CharacterCreation.awaiting_fighter_type)
    except sqlite3.IntegrityError:
        await message.reply("–¶–µ–π –Ω—ñ–∫ —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –í–∏–±–µ—Ä–∏ —ñ–Ω—à–∏–π.")
    finally:
        conn.close()

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –±—ñ–π—Ü—è
@dp.callback_query(CharacterCreation.awaiting_fighter_type, lambda c: c.data in ["swarmer", "out_boxer", "counter_puncher"])
async def handle_fighter_type(callback: types.CallbackQuery, state: FSMContext):
    logger.debug(f"Received fighter type selection from user {callback.from_user.id}: {callback.data}")
    user_id = callback.from_user.id
    fighter_type = callback.data
    user_data = await state.get_data()
    character_name = user_data.get("character_name")
    
    # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –±—ñ–π—Ü—ñ–≤
    fighter_stats = {
        "swarmer": {
            "stamina": 1.1,
            "total_stamina": 100,
            "strength": 1.5,
            "reaction": 1.1,
            "health": 120,
            "punch_speed": 1.35,
            "will": 1.5
        },
        "out_boxer": {
            "stamina": 1.5,
            "total_stamina": 100,
            "strength": 1.15,
            "reaction": 1.1,
            "health": 200,
            "punch_speed": 1.1,
            "will": 1.3
        },
        "counter_puncher": {
            "stamina": 1.15,
            "total_stamina": 100,
            "strength": 1.25,
            "reaction": 1.5,
            "health": 100,
            "punch_speed": 1.5,
            "will": 1.2
        }
    }
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    try:
        c.execute(
            "UPDATE users SET fighter_type = ? WHERE user_id = ?",
            (fighter_type, user_id)
        )
        stats = fighter_stats[fighter_type]
        c.execute(
            """INSERT INTO fighter_stats (user_id, fighter_type, stamina, strength, reaction, health, punch_speed, will)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
            (user_id, fighter_type, stats["stamina"], stats["strength"], stats["reaction"],
             stats["health"], stats["punch_speed"], stats["will"])
        )
        conn.commit()
        await callback.message.reply(f"–ê–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ü–µ—Ä—Å–æ–Ω–∞–∂: {character_name}, –¢–∏–ø: {fighter_type.capitalize()}")
        await callback.answer()
    except sqlite3.IntegrityError:
        await callback.message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±—ñ–π—Ü—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        await callback.answer()
    finally:
        conn.close()
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /delete_account
@dp.message(Command("delete_account"))
async def delete_account(message: types.Message):
    logger.debug(f"Received /delete_account from user {message.from_user.id}")
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if not c.fetchone():
        await message.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫–∞—É–Ω—Ç–∞!")
        conn.close()
        return
    c.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    c.execute("DELETE FROM fighter_stats WHERE user_id = ?", (user_id,))
    c.execute("DELETE FROM matches WHERE player1_id = ? OR player2_id = ?", (user_id, user_id))
    conn.commit()
    conn.close()
    await message.reply("–ê–∫–∞—É–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ! –ú–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /create_account.")

# –ö–æ–º–∞–Ω–¥–∞ /start_match
@dp.message(Command("start_match"))
async def start_match(message: types.Message):
    logger.debug(f"Received /start_match from user {message.from_user.id}")
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id, character_name, fighter_type FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    if not user:
        await message.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–∫–∞—É–Ω—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /create_account!")
        conn.close()
        return
    
    c.execute("SELECT match_id FROM matches WHERE (player1_id = ? OR player2_id = ?) AND status = 'active'", (user_id, user_id))
    if c.fetchone():
        await message.reply("–¢–∏ –≤–∂–µ –≤ –º–∞—Ç—á—ñ! –ó–∞–∫—ñ–Ω—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±—ñ–π.")
        conn.close()
        return
    
    c.execute("SELECT user_id, character_name, fighter_type FROM users WHERE user_id != ? AND user_id NOT IN (SELECT player1_id FROM matches WHERE status = 'active') AND user_id NOT IN (SELECT player2_id FROM matches WHERE status = 'active')", (user_id,))
    opponents = c.fetchall()
    if not opponents:
        await message.reply("–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å—É–ø–µ—Ä–Ω–∏–∫—ñ–≤. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        conn.close()
        return
    
    opponent = random.choice(opponents)
    opponent_id, opponent_name, opponent_type = opponent
    
    c.execute("SELECT health, total_stamina FROM fighter_stats WHERE user_id = ?", (user_id,))
    player_stats = c.fetchone()
    c.execute("SELECT health, total_stamina FROM fighter_stats WHERE user_id = ?", (opponent_id,))
    opponent_stats = c.fetchone()
    
    action_deadline = time.time() + 15
    c.execute(
        """INSERT INTO matches (player1_id, player2_id, status, start_time, current_round, player1_health, player1_stamina, player2_health, player2_stamina, action_deadline)
        VALUES (?, ?, 'active', ?, 1, ?, ?, ?, ?, ?)""",
        (user_id, opponent_id, time.time(), player_stats[0], player_stats[1], opponent_stats[0], opponent_stats[1], action_deadline)
    )
    conn.commit()
    match_id = c.lastrowid
    conn.close()
    
    keyboard = get_fight_keyboard(match_id)
    await message.reply(
        f"–ú–∞—Ç—á —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –¢–∏ ({user[1]}, {user[2].capitalize()}) –ø—Ä–æ—Ç–∏ {opponent_name} ({opponent_type.capitalize()}). –ë—ñ–π —Ç—Ä–∏–≤–∞—î 3 —Ö–≤–∏–ª–∏–Ω–∏. –û–±–µ—Ä–∏ –¥—ñ—é (15 —Å–µ–∫—É–Ω–¥):",
        reply_markup=keyboard
    )
    await bot.send_message(
        chat_id=opponent_id,
        text=f"–ú–∞—Ç—á —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –¢–∏ ({opponent_name}, {opponent_type.capitalize()}) –ø—Ä–æ—Ç–∏ {user[1]} ({user[2].capitalize()}). –ë—ñ–π —Ç—Ä–∏–≤–∞—î 3 —Ö–≤–∏–ª–∏–Ω–∏. –û–±–µ—Ä–∏ –¥—ñ—é (15 —Å–µ–∫—É–Ω–¥):",
        reply_markup=keyboard
    )

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ—é
def get_fight_keyboard(match_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("–í–¥–∞—Ä–∏—Ç–∏", callback_data=f"fight_{match_id}_attack")],
        [InlineKeyboardButton("–£—Ö–∏–ª–∏—Ç–∏—Å—è", callback_data=f"fight_{match_id}_dodge")],
        [InlineKeyboardButton("–ë–ª–æ–∫", callback_data=f"fight_{match_id}_block")],
        [InlineKeyboardButton("–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫", callback_data=f"fight_{match_id}_rest")]
    ])
    return keyboard

# –û–±—Ä–æ–±–∫–∞ –¥—ñ–π —É –±–æ—é
@dp.callback_query(lambda c: c.data.startswith("fight_"))
async def handle_fight_action(callback: types.CallbackQuery):
    logger.debug(f"Received fight action from user {callback.from_user.id}: {callback.data}")
    user_id = callback.from_user.id
    callback_data = callback.data.split("_")
    match_id, action = int(callback_data[1]), callback_data[2]
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT player1_id, player2_id, player1_action, player2_action, status, action_deadline FROM matches WHERE match_id = ?", (match_id,))
    match = c.fetchone()
    if not match or match[4] != "active":
        await callback.message.reply("–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î.")
        conn.close()
        await callback.answer()
        return
    
    player1_id, player2_id, player1_action, player2_action, status, action_deadline = match
    
    if time.time() > action_deadline:
        await callback.message.reply("–ß–∞—Å –¥–ª—è –¥—ñ—ó –º–∏–Ω—É–≤! –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")
        await process_round(match_id, timed_out=True)
        conn.close()
        await callback.answer()
        return
    
    if user_id == player1_id:
        c.execute("UPDATE matches SET player1_action = ? WHERE match_id = ?", (action, match_id))
    elif user_id == player2_id:
        c.execute("UPDATE matches SET player2_action = ? WHERE match_id = ?", (action, match_id))
    else:
        await callback.message.reply("–¢–∏ –Ω–µ —É—á–∞—Å–Ω–∏–∫ —Ü—å–æ–≥–æ –º–∞—Ç—á—É!")
        conn.close()
        await callback.answer()
        return
    
    conn.commit()
    
    c.execute("SELECT player1_action, player2_action FROM matches WHERE match_id = ?", (match_id,))
    actions = c.fetchone()
    if actions[0] and actions[1]:
        await process_round(match_id)
    
    conn.close()
    await callback.answer()

# –û–±—Ä–æ–±–∫–∞ —Ä–∞—É–Ω–¥—É
async def process_round(match_id, timed_out=False):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute(
        """SELECT player1_id, player2_id, player1_action, player2_action, player1_health, player1_stamina,
        player2_health, player2_stamina, current_round, start_time FROM matches WHERE match_id = ?""",
        (match_id,)
    )
    match = c.fetchone()
    player1_id, player2_id, p1_action, p2_action, p1_health, p1_stamina, p2_health, p2_stamina, round_num, start_time = match
    
    if time.time() > start_time + 180:
        await end_match(match_id, player1_id, player2_id, p1_health, p2_health)
        conn.close()
        return
    
    c.execute("SELECT strength, reaction, punch_speed, stamina FROM fighter_stats WHERE user_id = ?", (player1_id,))
    p1_stats = c.fetchone()
    p1_strength, p1_reaction, p1_punch_speed, p1_stamina_stat = p1_stats
    c.execute("SELECT strength, reaction, punch_speed, stamina FROM fighter_stats WHERE user_id = ?", (player2_id,))
    p2_stats = c.fetchone()
    p2_strength, p2_reaction, p2_punch_speed, p2_stamina_stat = p2_stats
    
    result_text = f"–†–∞—É–Ω–¥ {round_num}\n"
    
    if timed_out:
        p1_action = "rest"
        p2_action = "rest"
        result_text += "–ß–∞—Å –º–∏–Ω—É–≤! –û–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ—á–∏–≤–∞—é—Ç—å.\n"
    
    base_damage = 10
    if p1_action == "attack" and p2_action not in ["dodge", "block"]:
        damage = base_damage * p1_strength
        p2_health -= damage
        p1_stamina -= 10 * p1_stamina_stat
        result_text += f"–ì—Ä–∞–≤–µ—Ü—å 1 –≤–¥–∞—Ä–∏–≤ –ì—Ä–∞–≤—Ü—è 2! –£—Ä–æ–Ω: {damage:.1f}\n"
    elif p1_action == "attack" and p2_action == "block":
        block_strength = 0.5 * p2_stamina_stat * p2_strength
        damage = max(0, base_damage * p1_strength - block_strength)
        p2_health -= damage
        p1_stamina -= 10 * p1_stamina_stat
        result_text += f"–ì—Ä–∞–≤–µ—Ü—å 1 –≤–¥–∞—Ä–∏–≤, –∞–ª–µ –ì—Ä–∞–≤–µ—Ü—å 2 –±–ª–æ–∫—É–≤–∞–≤! –£—Ä–æ–Ω: {damage:.1f}\n"
    elif p1_action == "attack" and p2_action == "dodge":
        dodge_chance = 0.4 * p2_reaction * p2_punch_speed
        if random.random() < dodge_chance:
            result_text += "–ì—Ä–∞–≤–µ—Ü—å 1 –≤–¥–∞—Ä–∏–≤, –∞–ª–µ –ì—Ä–∞–≤–µ—Ü—å 2 —É—Ö–∏–ª–∏–≤—Å—è!\n"
        else:
            damage = base_damage * p1_strength
            p2_health -= damage
            p1_stamina -= 10 * p1_stamina_stat
            result_text += f"–ì—Ä–∞–≤–µ—Ü—å 1 –≤–¥–∞—Ä–∏–≤ –ì—Ä–∞–≤—Ü—è 2! –£—Ö–∏–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –£—Ä–æ–Ω: {damage:.1f}\n"
    elif p1_action == "rest":
        p1_stamina = min(p1_stamina + 15 * p1_stamina_stat, 100)
        result_text += "–ì—Ä–∞–≤–µ—Ü—å 1 –≤—ñ–¥–ø–æ—á–∏–≤–∞—î.\n"
    
    if p2_action == "attack" and p1_action not in ["dodge", "block"]:
        damage = base_damage * p2_strength
        p1_health -= damage
        p2_stamina -= 10 * p2_stamina_stat
        result_text += f"–ì—Ä–∞–≤–µ—Ü—å 2 –≤–¥–∞—Ä–∏–≤ –ì—Ä–∞–≤—Ü—è 1! –£—Ä–æ–Ω: {damage:.1f}\n"
    elif p2_action == "attack" and p1_action == "block":
        block_strength = 0.5 * p1_stamina_stat * p1_strength
        damage = max(0, base_damage * p2_strength - block_strength)
        p1_health -= damage
        p2_stamina -= 10 * p2_stamina_stat
        result_text += f"–ì—Ä–∞–≤–µ—Ü—å 2 –≤–¥–∞—Ä–∏–≤, –∞–ª–µ –ì—Ä–∞–≤–µ—Ü—å 1 –±–ª–æ–∫—É–≤–∞–≤! –£—Ä–æ–Ω: {damage:.1f}\n"
    elif p2_action == "attack" and p1_action == "dodge":
        dodge_chance = 0.4 * p1_reaction * p1_punch_speed
        if random.random() < dodge_chance:
            result_text += "–ì—Ä–∞–≤–µ—Ü—å 2 –≤–¥–∞—Ä–∏–≤, –∞–ª–µ –ì—Ä–∞–≤–µ—Ü—å 1 —É—Ö–∏–ª–∏–≤—Å—è!\n"
        else:
            damage = base_damage * p2_strength
            p1_health -= damage
            p2_stamina -= 10 * p2_stamina_stat
            result_text += f"–ì—Ä–∞–≤–µ—Ü—å 2 –≤–¥–∞—Ä–∏–≤ –ì—Ä–∞–≤—Ü—è 1! –£—Ö–∏–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –£—Ä–æ–Ω: {damage:.1f}\n"
    elif p2_action == "rest":
        p2_stamina = min(p2_stamina + 15 * p2_stamina_stat, 100)
        result_text += "–ì—Ä–∞–≤–µ—Ü—å 2 –≤—ñ–¥–ø–æ—á–∏–≤–∞—î.\n"
    
    if p1_health <= 0 or p2_health <= 0:
        await end_match(match_id, player1_id, player2_id, p1_health, p2_health)
        conn.close()
        return
    
    new_deadline = time.time() + 15
    c.execute(
        """UPDATE matches SET player1_health = ?, player1_stamina = ?, player2_health = ?, player2_stamina = ?,
        player1_action = NULL, player2_action = NULL, current_round = ?, action_deadline = ? WHERE match_id = ?""",
        (p1_health, p1_stamina, p2_health, p2_stamina, round_num + 1, new_deadline, match_id)
    )
    conn.commit()
    
    status_text = (
        f"–°—Ç–∞–Ω:\n–ì—Ä–∞–≤–µ—Ü—å 1: HP {p1_health:.1f}, –í–∏–Ω–æ—Å–ª–∏–≤—ñ—Å—Ç—å {p1_stamina:.1f}\n"
        f"–ì—Ä–∞–≤–µ—Ü—å 2: HP {p2_health:.1f}, –í–∏–Ω–æ—Å–ª–∏–≤—ñ—Å—Ç—å {p2_stamina:.1f}\n"
        "–û–±–µ—Ä–∏ –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é (15 —Å–µ–∫—É–Ω–¥):"
    )
    keyboard = get_fight_keyboard(match_id)
    await bot.send_message(
        chat_id=player1_id,
        text=result_text + status_text,
        reply_markup=keyboard
    )
    await bot.send_message(
        chat_id=player2_id,
        text=result_text + status_text,
        reply_markup=keyboard
    )
    
    conn.close()

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º–∞—Ç—á—É
async def end_match(match_id, player1_id, player2_id, p1_health, p2_health):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("UPDATE matches SET status = 'finished' WHERE match_id = ?", (match_id,))
    conn.commit()
    conn.close()
    
    if p1_health <= 0 and p2_health <= 0:
        result = "–ù—ñ—á–∏—è! –û–±–∏–¥–≤–∞ –±—ñ–π—Ü—ñ –≤—Ç—Ä–∞—Ç–∏–ª–∏ –≤—Å–µ –∑–¥–æ—Ä–æ–≤‚Äô—è."
    elif p1_health <= 0:
        result = "–ì—Ä–∞–≤–µ—Ü—å 2 –ø–µ—Ä–µ–º—ñ–≥!"
    elif p2_health <= 0:
        result = "–ì—Ä–∞–≤–µ—Ü—å 1 –ø–µ—Ä–µ–º—ñ–≥!"
    else:
        result = "–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ —á–∞—Å–æ–º. –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∑–∞ –∑–¥–æ—Ä–æ–≤‚Äô—è–º:\n"
        result += f"–ì—Ä–∞–≤–µ—Ü—å 1: HP {p1_health:.1f}\n–ì—Ä–∞–≤–µ—Ü—å 2: HP {p2_health:.1f}\n"
        result += "–ì—Ä–∞–≤–µ—Ü—å 1 –ø–µ—Ä–µ–º—ñ–≥!" if p1_health > p2_health else "–ì—Ä–∞–≤–µ—Ü—å 2 –ø–µ—Ä–µ–º—ñ–≥!" if p2_health > p1_health else "–ù—ñ—á–∏—è!"
    
    await bot.send_message(chat_id=player1_id, text=result)
    await bot.send_message(chat_id=player2_id, text=result)

# –ê–¥–º—ñ–Ω—Å—å–∫–∞ –∫–æ–º–∞–Ω–¥–∞ /admin_setting
@dp.message(Command("admin_setting"))
async def admin_setting(message: types.Message):
    user_id = message.from_user.id
    logger.debug(f"Received /admin_setting from user {user_id}")
    if user_id not in ADMIN_IDS:
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    await message.reply(
        "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:\n"
        "/maintenance_on - –£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏\n"
        "/maintenance_off - –í–∏–º–∫–Ω—É—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏"
    )

# –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ä–æ–±—ñ—Ç
@dp.message(Command("maintenance_on"))
async def maintenance_on(message: types.Message):
    user_id = message.from_user.id
    logger.debug(f"Received /maintenance_on from user {user_id}")
    if user_id not in ADMIN_IDS:
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    global maintenance_mode
    maintenance_mode = True
    await message.reply("–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ë–æ—Ç –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ.")

# –í–∏–º–∫–Ω–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ä–æ–±—ñ—Ç
@dp.message(Command("maintenance_off"))
async def maintenance_off(message: types.Message):
    user_id = message.from_user.id
    logger.debug(f"Received /maintenance_off from user {user_id}")
    if user_id not in ADMIN_IDS:
        await message.reply("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ!")
        return
    global maintenance_mode
    maintenance_mode = False
    await message.reply("–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–æ. –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π.")

# Health check –¥–ª—è UptimeRobot
@app.route("/health", methods=["GET"])
def health():
    return jsonify({"status": "ok"})

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É polling
async def main():
    logger.info("Starting bot...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook disabled successfully")
        bot_info = await bot.get_me()
        logger.info(f"Bot info: {bot_info}")
        await dp.start_polling(timeout=10, relax=0.2, drop_pending_updates=True)
        logger.info("Polling started successfully")
    except Exception as e:
        logger.error(f"Polling failed: {e}")
        raise

# –ó–∞–ø—É—Å–∫ Flask —É –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
def run_flask():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

if __name__ == "__main__":
    import threading
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()
    asyncio.run(main())