# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π:
# –í–∏–∫–æ–Ω–∞–π—Ç–µ –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º—ñ–Ω–∞–ª—ñ, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏:
# pip install aiogram aiohttp python-dotenv
# –Ø–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–æ–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–µ.
# –£ VS Code –≤–∏–±–µ—Ä—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä Python (Ctrl+Shift+P -> Python: Select Interpreter).

import logging
import os
import random
import sqlite3
import time
import asyncio
import re
import string
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —ñ–∑ .env
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# –õ–æ–∫–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
try:
    Vadym_ID = int(os.getenv("Vadym_ID", 0))
    Nazar_ID = int(os.getenv("Nazar_ID", 0))
except (ValueError, TypeError) as e:
    logger.error(f"Error reading Vadym_ID or Nazar_ID: {e}")
    Vadym_ID, Nazar_ID = 0, 0
DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///bot.db")

if not TELEGRAM_TOKEN:
    logger.error("TELEGRAM_TOKEN is not set")
    raise ValueError("TELEGRAM_TOKEN is required")

# –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ–≤
ADMIN_IDS = [id for id in [Vadym_ID, Nazar_ID] if id != 0]
logger.info(f"ADMIN_IDS: {ADMIN_IDS}")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)

# –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ —à—É–∫–∞—é—Ç—å –º–∞—Ç—á, —ñ –ø–æ–¥—ñ—è –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
searching_users = []
matchmaking_event = asyncio.Event()

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
class CharacterCreation(StatesGroup):
    awaiting_character_name = State()
    awaiting_fighter_type = State()

class RoomCreation(StatesGroup):
    awaiting_room_token = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
def init_db():
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("""CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        character_name TEXT UNIQUE,
        fighter_type TEXT
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS fighter_stats (
        user_id INTEGER PRIMARY KEY,
        fighter_type TEXT,
        stamina REAL,
        strength REAL,
        reaction REAL,
        health REAL,
        punch_speed REAL,
        will REAL,
        footwork REAL,
        FOREIGN KEY (user_id) REFERENCES users (user_id)
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS matches (
        match_id INTEGER PRIMARY KEY AUTOINCREMENT,
        player1_id INTEGER,
        player2_id INTEGER,
        status TEXT,
        start_time REAL,
        current_round INTEGER,
        player1_action TEXT,
        player2_action TEXT,
        player1_health REAL,
        player1_stamina REAL,
        player2_health REAL,
        player2_stamina REAL,
        action_deadline REAL,
        distance TEXT,
        FOREIGN KEY (player1_id) REFERENCES users (user_id),
        FOREIGN KEY (player2_id) REFERENCES users (user_id)
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS knockdowns (
        match_id INTEGER,
        player_id INTEGER,
        deadline REAL,
        FOREIGN KEY (match_id) REFERENCES matches (match_id),
        FOREIGN KEY (player_id) REFERENCES users (user_id)
    )""")
    c.execute("""CREATE TABLE IF NOT EXISTS rooms (
        token TEXT PRIMARY KEY,
        creator_id INTEGER,
        opponent_id INTEGER,
        created_at REAL,
        status TEXT,
        FOREIGN KEY (creator_id) REFERENCES users (user_id),
        FOREIGN KEY (opponent_id) REFERENCES users (user_id)
    )""")
    # –û—á–∏—â–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –º–∞—Ç—á—ñ–≤, –Ω–æ–∫–¥–∞—É–Ω—ñ–≤ —ñ —Å—Ç–∞—Ä–∏—Ö –∫—ñ–º–Ω–∞—Ç
    c.execute("DELETE FROM matches WHERE status = 'active'")
    c.execute("DELETE FROM knockdowns")
    c.execute("DELETE FROM rooms WHERE created_at < ?", (time.time() - 300,))
    conn.commit()
    conn.close()

init_db()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ maintenance mode
maintenance_mode = False

async def check_maintenance(message: types.Message):
    if maintenance_mode and message.from_user.id not in ADMIN_IDS:
        await message.reply("–ë–æ—Ç –Ω–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ä–æ–±–æ—Ç–∞—Ö. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        logger.debug(f"Maintenance mode blocked user {message.from_user.id}")
        return False
    return True

# –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
async def reset_state(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        logger.debug(f"Resetting state for user {message.from_user.id} from {current_state}")
        await state.clear()

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫—ñ–º–Ω–∞—Ç–∏
def generate_room_token():
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choice(characters) for _ in range(6))

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
async def setup_bot_commands():
    user_commands = [
        BotCommand(command="/start", description="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
        BotCommand(command="/create_account", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç"),
        BotCommand(command="/delete_account", description="–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç"),
        BotCommand(command="/start_match", description="–ü–æ—á–∞—Ç–∏ –º–∞—Ç—á"),
        BotCommand(command="/create_room", description="–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫—ñ–º–Ω–∞—Ç—É"),
        BotCommand(command="/join_room", description="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏"),
        BotCommand(command="/start_fight", description="–ü–æ—á–∞—Ç–∏ –±—ñ–π (—Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç–≤–æ—Ä—Ü—è –∫—ñ–º–Ω–∞—Ç–∏)"),
        BotCommand(command="/refresh_commands", description="–û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥")
    ]
    
    admin_commands = user_commands + [
        BotCommand(command="/admin_setting", description="–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"),
        BotCommand(command="/maintenance_on", description="–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏"),
        BotCommand(command="/maintenance_off", description="–í–∏–º–∫–Ω—É—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏")
    ]
    
    try:
        await bot.delete_my_commands(scope=BotCommandScopeDefault())
        logger.info("Cleared default commands")
        await bot.set_my_commands(commands=user_commands, scope=BotCommandScopeDefault())
        logger.info("Set default commands for all users")
    except TelegramBadRequest as e:
        logger.error(f"Failed to set default commands: {e}")
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.delete_my_commands(scope=BotCommandScopeChat(chat_id=admin_id))
            await bot.set_my_commands(commands=admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
            logger.info(f"Set admin commands for user {admin_id}")
        except TelegramBadRequest as e:
            logger.error(f"Failed to set admin commands for user {admin_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /refresh_commands
@dp.message(Command("refresh_commands"))
async def refresh_commands(message: types.Message, state: FSMContext):
    logger.debug(f"Received /refresh_commands from user {message.from_user.id}")
    await reset_state(message, state)
    if not await check_maintenance(message):
        return
    try:
        await setup_bot_commands()
        await message.reply("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ! –í—ñ–¥–∫—Ä–∏–π –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (üìã).")
        logger.debug(f"Refreshed commands for user {message.from_user.id}")
    except Exception as e:
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–º–∞–Ω–¥. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.error(f"Error refreshing commands for user {message.from_user.id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    logger.debug(f"Received /start from user {message.from_user.id}")
    await reset_state(message, state)
    user_id = message.from_user.id
    if not await check_maintenance(message):
        return
    await message.reply(
        "–í—ñ—Ç–∞—î–º–æ —É Box Manager Online! –í—ñ–¥–∫—Ä–∏–π –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (üìã), —â–æ–± –ø–æ—á–∞—Ç–∏."
    )
    logger.debug(f"Sent /start response to user {user_id}")

# –ö–æ–º–∞–Ω–¥–∞ /create_account
@dp.message(Command("create_account"))
async def create_account(message: types.Message, state: FSMContext):
    logger.debug(f"Received /create_account from user {message.from_user.id}")
    await reset_state(message, state)
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if c.fetchone():
        await message.reply("–¢–∏ –≤–∂–µ –º–∞—î—à –∞–∫–∞—É–Ω—Ç! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /delete_account, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ.")
        logger.debug(f"User {user_id} already has an account")
        conn.close()
        return
    conn.close()
    await message.reply("–í–≤–µ–¥–∏ —ñ–º'—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–Ω—ñ–∫ —É –≥—Ä—ñ, —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤):")
    await state.set_state(CharacterCreation.awaiting_character_name)
    logger.debug(f"Prompted user {user_id} for character name")

# –û–±—Ä–æ–±–∫–∞ —ñ–º–µ–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
@dp.message(CharacterCreation.awaiting_character_name)
async def handle_character_name(message: types.Message, state: FSMContext):
    logger.debug(f"Received text input from user {message.from_user.id}: {message.text}")
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    character_name = message.text.strip()

    if character_name.startswith('/'):
        await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –Ω—ñ–∫, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.debug(f"User {user_id} entered command {character_name} instead of nickname")
        return

    if not re.match(r'^[a-zA-Z0-9_]{1,20}$', character_name):
        await message.reply("–ù—ñ–∫ –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, —Å–∏–º–≤–æ–ª '_', –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.debug(f"Invalid character name {character_name} from user {user_id}")
        return

    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT character_name FROM users WHERE character_name = ?", (character_name,))
    if c.fetchone():
        await message.reply("–¶–µ–π –Ω—ñ–∫ —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π. –í–∏–±–µ—Ä–∏ —ñ–Ω—à–∏–π.")
        logger.debug(f"Character name {character_name} already taken")
        conn.close()
        return
    try:
        c.execute(
            "INSERT INTO users (user_id, username, character_name) VALUES (?, ?, ?)",
            (user_id, message.from_user.username, character_name),
        )
        conn.commit()
        await state.update_data(character_name=character_name)
        fighter_descriptions = (
            "–í–∏–±–µ—Ä–∏ —Ç–∏–ø –±—ñ–π—Ü—è (–∑–º—ñ–Ω–∏—Ç–∏ –≤–∏–±—ñ—Ä –ø–æ—Ç—ñ–º –Ω–µ–º–æ–∂–ª–∏–≤–æ):\n\n"
            "üî• *Swarmer*: –ê–≥—Ä–µ—Å–∏–≤–Ω–∏–π –±–æ—î—Ü—å. –í–∏—Å–æ–∫–∞ —Å–∏–ª–∞ (1.5), –≤–æ–ª—è (1.5), —à–≤–∏–¥–∫—ñ—Å—Ç—å —É–¥–∞—Ä—É (1.35), —Ä–æ–±–æ—Ç–∞ –Ω—ñ–≥ (1.2). –ó–¥–æ—Ä–æ–≤‚Äô—è: 195, –≤–∏–Ω–æ—Å–ª–∏–≤—ñ—Å—Ç—å: 1.1.\n"
            "ü•ä *Out-boxer*: –í–∏—Ç—Ä–∏–≤–∞–ª–∏–π —ñ —Ç–∞–∫—Ç–∏—á–Ω–∏–π. –í–∏—Å–æ–∫–∞ –≤–∏–Ω–æ—Å–ª–∏–≤—ñ—Å—Ç—å (1.5), –∑–¥–æ—Ä–æ–≤‚Äô—è: 300, —Ä–æ–±–æ—Ç–∞ –Ω—ñ–≥ (1.4). –°–∏–ª–∞: 1.15, –≤–æ–ª—è: 1.3.\n"
            "‚ö° *Counter-puncher*: –ú–∞–π—Å—Ç–µ—Ä –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫–∏. –í–∏—Å–æ–∫–∞ —Ä–µ–∞–∫—Ü—ñ—è (1.5), —à–≤–∏–¥–∫—ñ—Å—Ç—å —É–¥–∞—Ä—É (1.5), —Ä–æ–±–æ—Ç–∞ –Ω—ñ–≥ (1.5). –°–∏–ª–∞: 1.25, –∑–¥–æ—Ä–æ–≤‚Äô—è: 150, –≤–æ–ª—è: 1.2."
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="Swarmer", callback_data="swarmer")],
            [InlineKeyboardButton(text="Out-boxer", callback_data="out_boxer")],
            [InlineKeyboardButton(text="Counter-puncher", callback_data="counter_puncher")],
        ])
        await message.reply(fighter_descriptions, reply_markup=keyboard, parse_mode="Markdown")
        await state.set_state(CharacterCreation.awaiting_fighter_type)
        logger.debug(f"Sent fighter type selection to user {user_id}")
    except sqlite3.IntegrityError as e:
        await message.reply("–ü–æ–º–∏–ª–∫–∞: —Ü–µ–π –Ω—ñ–∫ —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π —ñ–Ω—à–∏–π.")
        logger.error(f"Integrity error for character name {character_name}: {e}")
    except Exception as e:
        await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–∫–∞—É–Ω—Ç–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.error(f"Error creating account for user {user_id}: {e}")
    finally:
        conn.close()

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –±—ñ–π—Ü—è
@dp.callback_query(CharacterCreation.awaiting_fighter_type, lambda c: c.data in ["swarmer", "out_boxer", "counter_puncher"])
async def handle_fighter_type(callback: types.CallbackQuery, state: FSMContext):
    logger.debug(f"Received fighter type selection from user {callback.from_user.id}: {callback.data}")
    user_id = callback.from_user.id
    fighter_type = callback.data
    user_data = await state.get_data()
    character_name = user_data.get("character_name")
    
    fighter_stats = {
        "swarmer": {
            "stamina": 1.1,
            "strength": 1.5,
            "reaction": 1.1,
            "health": 195,
            "punch_speed": 1.35,
            "will": 1.5,
            "footwork": 1.2
        },
        "out_boxer": {
            "stamina": 1.5,
            "strength": 1.15,
            "reaction": 1.1,
            "health": 300,
            "punch_speed": 1.1,
            "will": 1.3,
            "footwork": 1.4
        },
        "counter_puncher": {
            "stamina": 1.15,
            "strength": 1.25,
            "reaction": 1.5,
            "health": 150,
            "punch_speed": 1.5,
            "will": 1.2,
            "footwork": 1.5
        }
    }
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    try:
        c.execute(
            "UPDATE users SET fighter_type = ? WHERE user_id = ?",
            (fighter_type, user_id)
        )
        stats = fighter_stats[fighter_type]
        c.execute(
            """INSERT INTO fighter_stats (user_id, fighter_type, stamina, strength, reaction, health, punch_speed, will, footwork)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)""",
            (user_id, fighter_type, stats["stamina"], stats["strength"], stats["reaction"],
             stats["health"], stats["punch_speed"], stats["will"], stats["footwork"])
        )
        conn.commit()
        await callback.message.reply(f"–ê–∫–∞—É–Ω—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ! –ü–µ—Ä—Å–æ–Ω–∞–∂: {character_name}, –¢–∏–ø: {fighter_type.capitalize()}")
        await callback.answer()
        logger.debug(f"Created account for user {user_id}: {character_name}, {fighter_type}")
    except sqlite3.IntegrityError as e:
        await callback.message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –±—ñ–π—Ü—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.error(f"Integrity error for fighter type {fighter_type} for user {user_id}: {e}")
        await callback.answer()
    except Exception as e:
        await callback.message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±—ñ–π—Ü—è. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.error(f"Error saving fighter type for user {user_id}: {e}")
        await callback.answer()
    finally:
        conn.close()
        await state.clear()

# –ö–æ–º–∞–Ω–¥–∞ /delete_account
@dp.message(Command("delete_account"))
async def delete_account(message: types.Message, state: FSMContext):
    logger.debug(f"Received /delete_account from user {message.from_user.id}")
    await reset_state(message, state)
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id FROM users WHERE user_id = ?", (user_id,))
    if not c.fetchone():
        await message.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –∞–∫–∞—É–Ω—Ç–∞!")
        logger.debug(f"No account found for user {user_id}")
        conn.close()
        return
    c.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    c.execute("DELETE FROM fighter_stats WHERE user_id = ?", (user_id,))
    c.execute("DELETE FROM matches WHERE player1_id = ? OR player2_id = ?", (user_id, user_id))
    c.execute("DELETE FROM knockdowns WHERE player_id = ?", (user_id,))
    c.execute("DELETE FROM rooms WHERE creator_id = ? OR opponent_id = ?", (user_id, user_id))
    conn.commit()
    conn.close()
    await message.reply("–ê–∫–∞—É–Ω—Ç –≤–∏–¥–∞–ª–µ–Ω–æ! –ú–æ–∂–µ—à —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /create_account.")
    logger.debug(f"Deleted account for user {user_id}")

# –ö–æ–º–∞–Ω–¥–∞ /create_room
@dp.message(Command("create_room"))
async def create_room(message: types.Message, state: FSMContext):
    logger.debug(f"Received /create_room from user {message.from_user.id}")
    await reset_state(message, state)
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id, character_name FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    if not user:
        await message.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–∫–∞—É–Ω—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /create_account!")
        logger.debug(f"No account for user {user_id} for /create_room")
        conn.close()
        return
    
    c.execute("SELECT match_id FROM matches WHERE (player1_id = ? OR player2_id = ?) AND status = 'active'", (user_id, user_id))
    if c.fetchone():
        await message.reply("–¢–∏ –≤–∂–µ –≤ –º–∞—Ç—á—ñ! –ó–∞–∫—ñ–Ω—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±—ñ–π.")
        logger.debug(f"User {user_id} already in active match")
        conn.close()
        return
    
    c.execute("SELECT token FROM rooms WHERE creator_id = ? AND status = 'waiting'", (user_id,))
    if c.fetchone():
        await message.reply("–¢–∏ –≤–∂–µ —Å—Ç–≤–æ—Ä–∏–≤ –∫—ñ–º–Ω–∞—Ç—É! –ó–∞—á–µ–∫–∞–π, –ø–æ–∫–∏ —Ö—Ç–æ—Å—å –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è, –∞–±–æ –≤–∏–¥–∞–ª–∏ –∞–∫–∞—É–Ω—Ç.")
        logger.debug(f"User {user_id} already has a waiting room")
        conn.close()
        return
    
    token = generate_room_token()
    try:
        c.execute(
            "INSERT INTO rooms (token, creator_id, created_at, status) VALUES (?, ?, ?, ?)",
            (token, user_id, time.time(), 'waiting')
        )
        conn.commit()
        await message.reply(
            f"–ö—ñ–º–Ω–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞! –¢–æ–∫–µ–Ω: <code>{token}</code>\n–ü–æ–¥—ñ–ª–∏—Å—å –Ω–∏–º —ñ–∑ —Å—É–ø–µ—Ä–Ω–∏–∫–æ–º. "
            f"–ö–æ–ª–∏ —Å—É–ø–µ—Ä–Ω–∏–∫ –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /start_fight, —â–æ–± –ø–æ—á–∞—Ç–∏ –±—ñ–π.",
            parse_mode="HTML"
        )
        logger.debug(f"Created room with token {token} for user {user_id}")
    except sqlite3.IntegrityError:
        await message.reply("–ü–æ–º–∏–ª–∫–∞: —Ç–æ–∫–µ–Ω —É–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.error(f"Token {token} already exists")
    finally:
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /join_room
@dp.message(Command("join_room"))
async def join_room(message: types.Message, state: FSMContext):
    logger.debug(f"Received /join_room from user {message.from_user.id}")
    await reset_state(message, state)
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id, character_name FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    if not user:
        await message.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–∫–∞—É–Ω—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /create_account!")
        logger.debug(f"No account for user {user_id} for /join_room")
        conn.close()
        return
    
    c.execute("SELECT match_id FROM matches WHERE (player1_id = ? OR player2_id = ?) AND status = 'active'", (user_id, user_id))
    if c.fetchone():
        await message.reply("–¢–∏ –≤–∂–µ –≤ –º–∞—Ç—á—ñ! –ó–∞–∫—ñ–Ω—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±—ñ–π.")
        logger.debug(f"User {user_id} already in active match")
        conn.close()
        return
    
    args = message.text.split()
    if len(args) != 2:
        await message.reply("–í–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –∫—ñ–º–Ω–∞—Ç–∏: /join_room <token>")
        logger.debug(f"Invalid /join_room command from user {user_id}")
        conn.close()
        return
    
    token = args[1].strip()
    c.execute("SELECT creator_id, created_at, opponent_id, status FROM rooms WHERE token = ?", (token,))
    room = c.fetchone()
    if not room:
        await message.reply("–ö—ñ–º–Ω–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞!")
        logger.debug(f"Room with token {token} not found")
        conn.close()
        return
    
    creator_id, created_at, opponent_id, status = room
    if creator_id == user_id:
        await message.reply("–¢–∏ –Ω–µ –º–æ–∂–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –≤–ª–∞—Å–Ω–æ—ó –∫—ñ–º–Ω–∞—Ç–∏!")
        logger.debug(f"User {user_id} tried to join own room {token}")
        conn.close()
        return
    
    if status != 'waiting':
        await message.reply("–ö—ñ–º–Ω–∞—Ç–∞ –≤–∂–µ –∑–∞–∫—Ä–∏—Ç–∞ –∞–±–æ –±—ñ–π —Ä–æ–∑–ø–æ—á–∞—Ç–æ!")
        logger.debug(f"Room {token} is not in waiting status")
        conn.close()
        return
    
    if opponent_id is not None:
        await message.reply("–ö—ñ–º–Ω–∞—Ç–∞ –≤–∂–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–∞! –ú–∞–∫—Å–∏–º—É–º 2 –≥—Ä–∞–≤—Ü—ñ.")
        logger.debug(f"Room {token} already has 2 players")
        conn.close()
        return
    
    if time.time() - created_at > 300:
        c.execute("DELETE FROM rooms WHERE token = ?", (token,))
        conn.commit()
        await message.reply("–ö—ñ–º–Ω–∞—Ç–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∞!")
        logger.debug(f"Room {token} expired")
        conn.close()
        return
    
    try:
        c.execute(
            "UPDATE rooms SET opponent_id = ?, status = 'ready' WHERE token = ?",
            (user_id, token)
        )
        conn.commit()
        await message.reply(
            f"–¢–∏ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ {token}! –ß–µ–∫–∞–π, –ø–æ–∫–∏ —Ç–≤–æ—Ä–µ—Ü—å —Ä–æ–∑–ø–æ—á–Ω–µ –±—ñ–π (/start_fight)."
        )
        await bot.send_message(
            creator_id,
            f"–ì—Ä–∞–≤–µ—Ü—å {user[1]} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ —Ç–≤–æ—î—ó –∫—ñ–º–Ω–∞—Ç–∏ {token}! "
            f"–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /start_fight, —â–æ–± –ø–æ—á–∞—Ç–∏ –±—ñ–π."
        )
        logger.debug(f"User {user_id} joined room {token}")
    except sqlite3.Error as e:
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –∫—ñ–º–Ω–∞—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.error(f"Database error joining room {token}: {e}")
    finally:
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start_fight
@dp.message(Command("start_fight"))
async def start_fight(message: types.Message, state: FSMContext):
    logger.debug(f"Received /start_fight from user {message.from_user.id}")
    await reset_state(message, state)
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT token, opponent_id, status FROM rooms WHERE creator_id = ? AND status = 'ready'", (user_id,))
    room = c.fetchone()
    if not room:
        await message.reply("–¢–∏ –Ω–µ —Å—Ç–≤–æ—Ä–∏–≤ –∫—ñ–º–Ω–∞—Ç—É, –∞–±–æ —â–µ –Ω–µ–º–∞—î —Å—É–ø–µ—Ä–Ω–∏–∫–∞!")
        logger.debug(f"No ready room found for creator {user_id}")
        conn.close()
        return
    
    token, opponent_id, status = room
    if opponent_id is None:
        await message.reply("–°—É–ø–µ—Ä–Ω–∏–∫ —â–µ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è! –ó–∞—á–µ–∫–∞–π.")
        logger.debug(f"No opponent in room {token}")
        conn.close()
        return
    
    c.execute("SELECT user_id, character_name, fighter_type FROM users WHERE user_id = ?", (user_id,))
    creator = c.fetchone()
    c.execute("SELECT user_id, character_name, fighter_type FROM users WHERE user_id = ?", (opponent_id,))
    opponent = c.fetchone()
    
    if not creator or not opponent:
        await message.reply("–ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –≥—Ä–∞–≤—Ü—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        logger.error(f"User data missing for creator {user_id} or opponent {opponent_id}")
        conn.close()
        return
    
    c.execute("SELECT health, stamina FROM fighter_stats WHERE user_id = ?", (user_id,))
    creator_stats = c.fetchone()
    c.execute("SELECT health, stamina FROM fighter_stats WHERE user_id = ?", (opponent_id,))
    opponent_stats = c.fetchone()
    
    if not creator_stats or not opponent_stats:
        await message.reply("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ñ–π—Ü—è. –°–ø—Ä–æ–±—É–π –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π.")
        logger.error(f"Missing stats for user {user_id} or opponent {opponent_id}")
        conn.close()
        return
    
    try:
        action_deadline = time.time() + 30
        c.execute(
            """INSERT INTO matches (player1_id, player2_id, status, start_time, current_round, player1_health, player1_stamina, player2_health, player2_stamina, action_deadline, distance)
            VALUES (?, ?, 'active', ?, 1, ?, ?, ?, ?, ?, 'far')""",
            (user_id, opponent_id, time.time(), creator_stats[0], creator_stats[1], opponent_stats[0], opponent_stats[1], action_deadline)
        )
        conn.commit()
        match_id = c.lastrowid
        c.execute("UPDATE rooms SET status = 'active' WHERE token = ?", (token,))
        conn.commit()
        
        keyboard = get_fight_keyboard(match_id, "far")
        await message.reply(
            f"–ú–∞—Ç—á —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –¢–∏ ({creator[1]}, {creator[2].capitalize()}) –ø—Ä–æ—Ç–∏ {opponent[1]} ({opponent[2].capitalize()}). "
            f"–ë—ñ–π —Ç—Ä–∏–≤–∞—î 3 —Ä–∞—É–Ω–¥–∏ –ø–æ 3 —Ö–≤–∏–ª–∏–Ω–∏. –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: –î–∞–ª–µ–∫–æ. –û–±–µ—Ä–∏ –¥—ñ—é (30 —Å–µ–∫—É–Ω–¥):",
            reply_markup=keyboard
        )
        await bot.send_message(
            opponent_id, f"–ú–∞—Ç—á —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –¢–∏ ({opponent[1]}, {opponent[2].capitalize()}) –ø—Ä–æ—Ç–∏ {creator[1]} ({creator[2].capitalize()}). "
            f"–ë—ñ–π —Ç—Ä–∏–≤–∞—î 3 —Ä–∞—É–Ω–¥–∏ –ø–æ 3 —Ö–≤–∏–ª–∏–Ω–∏. –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: –î–∞–ª–µ–∫–æ. –û–±–µ—Ä–∏ –¥—ñ—é (30 —Å–µ–∫—É–Ω–¥):",
            reply_markup=keyboard
        )
        logger.debug(f"Started match {match_id} for user {user_id} vs {opponent_id}")
    except sqlite3.Error as e:
        await message.reply("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –º–∞—Ç—á—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.error(f"Database error starting match for room {token}: {e}")
    finally:
        conn.close()

# –ö–æ–º–∞–Ω–¥–∞ /start_match
@dp.message(Command("start_match"))
async def start_match(message: types.Message, state: FSMContext):
    logger.debug(f"Received /start_match from user {message.from_user.id}")
    await reset_state(message, state)
    if not await check_maintenance(message):
        return
    user_id = message.from_user.id
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT user_id, character_name, fighter_type FROM users WHERE user_id = ?", (user_id,))
    user = c.fetchone()
    if not user:
        await message.reply("–°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä–∏ –∞–∫–∞—É–Ω—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /create_account!")
        logger.debug(f"No account for user {user_id} for /start_match")
        conn.close()
        return
    
    c.execute("SELECT match_id FROM matches WHERE (player1_id = ? OR player2_id = ?) AND status = 'active'", (user_id, user_id))
    if c.fetchone():
        await message.reply("–¢–∏ –≤–∂–µ –≤ –º–∞—Ç—á—ñ! –ó–∞–∫—ñ–Ω—á–∏ –ø–æ—Ç–æ—á–Ω–∏–π –±—ñ–π.")
        logger.debug(f"User {user_id} already in active match")
        conn.close()
        return
    
    if user_id in searching_users:
        await message.reply("–¢–∏ –≤–∂–µ —à—É–∫–∞—î—à —Å—É–ø–µ—Ä–Ω–∏–∫–∞! –ó–∞—á–µ–∫–∞–π.")
        logger.debug(f"User {user_id} already in searching_users")
        conn.close()
        return
    
    searching_users.append(user_id)
    logger.debug(f"User {user_id} added to searching_users: {searching_users}")
    matchmaking_event.set()
    
    await message.reply("–ü–æ—à—É–∫ —Å—É–ø–µ—Ä–Ω–∏–∫–∞... (–º–∞–∫—Å. 30 —Å–µ–∫—É–Ω–¥)")
    
    try:
        await asyncio.wait_for(matchmaking_event.wait(), timeout=30)
        for opponent_id in searching_users:
            if opponent_id != user_id:
                if user_id in searching_users:
                    searching_users.remove(user_id)
                if opponent_id in searching_users:
                    searching_users.remove(opponent_id)
                logger.debug(f"Match found: {user_id} vs {opponent_id}")
                
                c.execute("SELECT user_id, character_name, fighter_type FROM users WHERE user_id = ?", (opponent_id,))
                opponent = c.fetchone()
                if not opponent:
                    await message.reply("–ü–æ–º–∏–ª–∫–∞: —Å—É–ø–µ—Ä–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
                    logger.error(f"Opponent {opponent_id} not found in users")
                    conn.close()
                    return
                
                c.execute("SELECT health, stamina FROM fighter_stats WHERE user_id = ?", (user_id,))
                player_stats = c.fetchone()
                c.execute("SELECT health, stamina FROM fighter_stats WHERE user_id = ?", (opponent_id,))
                opponent_stats = c.fetchone()
                
                if not player_stats or not opponent_stats:
                    await message.reply("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—ñ–π—Ü—è. –°–ø—Ä–æ–±—É–π –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–∫–∞—É–Ω—Ç —ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π.")
                    logger.error(f"Missing stats for user {user_id} or opponent {opponent_id}")
                    conn.close()
                    return
                
                action_deadline = time.time() + 30
                c.execute(
                    """INSERT INTO matches (player1_id, player2_id, status, start_time, current_round, player1_health, player1_stamina, player2_health, player2_stamina, action_deadline, distance)
                    VALUES (?, ?, 'active', ?, 1, ?, ?, ?, ?, ?, 'far')""",
                    (user_id, opponent_id, time.time(), player_stats[0], player_stats[1], opponent_stats[0], opponent_stats[1], action_deadline)
                )
                conn.commit()
                match_id = c.lastrowid
                conn.close()
                
                keyboard = get_fight_keyboard(match_id, "far")
                await message.reply(
                    f"–ú–∞—Ç—á —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –¢–∏ ({user[1]}, {user[2].capitalize()}) –ø—Ä–æ—Ç–∏ {opponent[1]} ({opponent[2].capitalize()}). –ë—ñ–π —Ç—Ä–∏–≤–∞—î 3 —Ä–∞—É–Ω–¥–∏ –ø–æ 3 —Ö–≤–∏–ª–∏–Ω–∏. –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: –î–∞–ª–µ–∫–æ. –û–±–µ—Ä–∏ –¥—ñ—é (30 —Å–µ–∫—É–Ω–¥):",
                    reply_markup=keyboard
                )
                await bot.send_message(
                    chat_id=opponent_id,
                    text=f"–ú–∞—Ç—á —Ä–æ–∑–ø–æ—á–∞—Ç–æ! –¢–∏ ({opponent[1]}, {opponent[2].capitalize()}) –ø—Ä–æ—Ç–∏ {user[1]} ({user[2].capitalize()}). –ë—ñ–π —Ç—Ä–∏–≤–∞—î 3 —Ä–∞—É–Ω–¥–∏ –ø–æ 3 —Ö–≤–∏–ª–∏–Ω–∏. –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: –î–∞–ª–µ–∫–æ. –û–±–µ—Ä–∏ –¥—ñ—é (30 —Å–µ–∫—É–Ω–¥):",
                    reply_markup=keyboard
                )
                logger.debug(f"Started match {match_id} for user {user_id} vs {opponent_id}")
                return
        
        if user_id in searching_users:
            searching_users.remove(user_id)
        await message.reply("–°—É–ø–µ—Ä–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.debug(f"Search timeout for user {user_id}")
        conn.close()
    except asyncio.TimeoutError:
        if user_id in searching_users:
            searching_users.remove(user_id)
        await message.reply("–°—É–ø–µ—Ä–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        logger.debug(f"Search timeout for user {user_id}")
        conn.close()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ—é
def get_fight_keyboard(match_id, distance):
    if distance == "close":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∂–µ–±", callback_data=f"fight_{match_id}_jab"),
                InlineKeyboardButton(text="–ê–ø–µ—Ä–∫–æ—Ç", callback_data=f"fight_{match_id}_uppercut"),
                InlineKeyboardButton(text="–•—É–∫", callback_data=f"fight_{match_id}_hook")
            ],
            [
                InlineKeyboardButton(text="–£—Ö–∏–ª–∏—Ç–∏—Å—è", callback_data=f"fight_{match_id}_dodge"),
                InlineKeyboardButton(text="–ë–ª–æ–∫", callback_data=f"fight_{match_id}_block"),
                InlineKeyboardButton(text="–í—ñ–¥—ñ–π—Ç–∏", callback_data=f"fight_{match_id}_move_away")
            ],
            [
                InlineKeyboardButton(text="–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫", callback_data=f"fight_{match_id}_rest")
            ]
        ])
    else:  # far, cornered_p1, cornered_p2
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∂–µ–±", callback_data=f"fight_{match_id}_jab"),
                InlineKeyboardButton(text="–£—Ö–∏–ª–∏—Ç–∏—Å—è", callback_data=f"fight_{match_id}_dodge"),
                InlineKeyboardButton(text="–ë–ª–æ–∫", callback_data=f"fight_{match_id}_block")
            ],
            [
                InlineKeyboardButton(text="–ü—ñ–¥—ñ–π—Ç–∏", callback_data=f"fight_{match_id}_move_closer"),
                InlineKeyboardButton(text="–í—ñ–¥–ø–æ—á–∏–Ω–æ–∫", callback_data=f"fight_{match_id}_rest")
            ]
        ])
    return keyboard

# –û–±—Ä–æ–±–∫–∞ –¥—ñ–π —É –±–æ—é
@dp.callback_query(lambda c: c.data.startswith("fight_"))
async def handle_fight_action(callback: types.CallbackQuery):
    logger.debug(f"Received fight action from user {callback.from_user.id}: {callback.data}")
    user_id = callback.from_user.id
    callback_data = callback.data.split("_")
    match_id, action = int(callback_data[1]), callback_data[2]
    
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute("SELECT player1_id, player2_id, player1_action, player2_action, status, action_deadline, distance FROM matches WHERE match_id = ?", (match_id,))
    match = c.fetchone()
    if not match or match[4] != "active":
        await callback.message.reply("–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–±–æ –Ω–µ —ñ—Å–Ω—É—î.")
        logger.debug(f"Match {match_id} not active or does not exist")
        conn.close()
        await callback.answer()
        return
    
    player1_id, player2_id, player1_action, player2_action, status, action_deadline, distance = match
    
    if time.time() > action_deadline:
        await callback.message.reply("–ß–∞—Å –¥–ª—è –¥—ñ—ó –º–∏–Ω—É–≤! –†–∞—É–Ω–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ.")
        await process_round(match_id, timed_out=True)
        logger.debug(f"Match {match_id} round timed out")
        conn.close()
        await callback.answer()
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –¥—ñ—ó –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó
    if distance != "close" and action in ["uppercut", "hook"]:
        await callback.message.reply("–ù–∞ –¥–∞–ª–µ–∫—ñ–π –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó –¥–æ—Å—Ç—É–ø–Ω–∏–π –ª–∏—à–µ –î–∂–µ–±!")
        logger.debug(f"Invalid action {action} for far/cornered distance in match {match_id}")
        conn.close()
        await callback.answer()
        return
    if distance == "close" and action == "move_closer":
        await callback.message.reply("–í–∏ –≤–∂–µ –Ω–∞ –±–ª–∏–∑—å–∫—ñ–π –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó!")
        logger.debug(f"Invalid action move_closer for close distance in match {match_id}")
        conn.close()
        await callback.answer()
        return
    if distance in ["far", "cornered_p1", "cornered_p2"] and action == "move_away":
        await callback.message.reply("–í–∏ –≤–∂–µ –Ω–∞ –¥–∞–ª–µ–∫—ñ–π –¥–∏—Å—Ç–∞–Ω—Ü—ñ—ó!")
        logger.debug(f"Invalid action move_away for far distance in match {match_id}")
        conn.close()
        await callback.answer()
        return
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥—ñ—ó
    if user_id == player1_id:
        c.execute("UPDATE matches SET player1_action = ? WHERE match_id = ?", (action, match_id))
    elif user_id == player2_id:
        c.execute("UPDATE matches SET player2_action = ? WHERE match_id = ?", (action, match_id))
    else:
        await callback.message.reply("–¢–∏ –Ω–µ —É—á–∞—Å–Ω–∏–∫ —Ü—å–æ–≥–æ –º–∞—Ç—á—É!")
        logger.debug(f"User {user_id} not in match {match_id}")
        conn.close()
        await callback.answer()
        return
    
    conn.commit()
    
    c.execute("SELECT player1_action, player2_action FROM matches WHERE match_id = ?", (match_id,))
    actions = c.fetchone()
    if actions[0] and actions[1]:
        await process_round(match_id)
    
    conn.close()
    await callback.answer()
    logger.debug(f"Processed fight action {action} for match {match_id} by user {user_id}")

# –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –±—ñ–π
async def send_fight_message(match_id):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute(
        """SELECT player1_id, player2_id, player1_health, player1_stamina, player2_health, player2_stamina, current_round, distance
        FROM matches WHERE match_id = ?""",
        (match_id,)
    )
    match = c.fetchone()
    if not match:
        conn.close()
        return
    
    player1_id, player2_id, p1_health, p1_stamina, p2_health, p2_stamina, round_num, distance = match
    c.execute("SELECT character_name, fighter_type FROM users WHERE user_id = ?", (player1_id,))
    p1_name, p1_type = c.fetchone()
    c.execute("SELECT character_name, fighter_type FROM users WHERE user_id = ?", (player2_id,))
    p2_name, p2_type = c.fetchone()
    c.execute("SELECT health FROM fighter_stats WHERE user_id = ?", (player1_id,))
    p1_max_health = c.fetchone()[0]
    c.execute("SELECT health FROM fighter_stats WHERE user_id = ?", (player2_id,))
    p2_max_health = c.fetchone()[0]
    
    p1_status_text = get_status_text(p1_name, p1_type, p1_health, p1_stamina, p1_max_health)
    p2_status_text = get_status_text(p2_name, p2_type, p2_health, p2_stamina, p2_max_health)
    
    distance_text = {
        "far": "–î–∞–ª–µ–∫–æ",
        "close": "–ë–ª–∏–∑—å–∫–æ",
        "cornered_p1": f"{p1_name} —É –∫—É—Ç—ñ!",
        "cornered_p2": f"{p2_name} —É –∫—É—Ç—ñ!"
    }[distance]
    
    keyboard = get_fight_keyboard(match_id, distance)
    action_deadline = time.time() + 30
    c.execute("UPDATE matches SET action_deadline = ?, player1_action = NULL, player2_action = NULL WHERE match_id = ?", (action_deadline, match_id))
    conn.commit()
    
    await bot.send_message(
        player1_id,
        f"–†–∞—É–Ω–¥ {round_num}\n–î–∏—Å—Ç–∞–Ω—Ü—ñ—è: {distance_text}\n{p1_status_text}\n{p2_status_text}\n–û–±–µ—Ä–∏ –¥—ñ—é (30 —Å–µ–∫—É–Ω–¥):",
        reply_markup=keyboard
    )
    await bot.send_message(
        player2_id,
        f"–†–∞—É–Ω–¥ {round_num}\n–î–∏—Å—Ç–∞–Ω—Ü—ñ—è: {distance_text}\n{p2_status_text}\n{p1_status_text}\n–û–±–µ—Ä–∏ –¥—ñ—é (30 —Å–µ–∫—É–Ω–¥):",
        reply_markup=keyboard
    )
    
    conn.close()

# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Å—Ç–∞–Ω—É –≥—Ä–∞–≤—Ü—è
def get_status_text(name, fighter_type, health, stamina, max_health):
    return f"{name} ({fighter_type.capitalize()}):\n–ó–¥–æ—Ä–æ–≤‚Äô—è: {health:.1f}/{max_health:.1f}, –ï–Ω–µ—Ä–≥—ñ—è: {stamina:.1f}/100"

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–∫–¥–∞—É–Ω—É
async def handle_knockdown(match_id, player_id, opponent_id, player_name, opponent_name):
    logger.debug(f"Player {player_name} in knockdown for match {match_id}")
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    
    c.execute("SELECT will FROM fighter_stats WHERE user_id = ?", (player_id,))
    will = c.fetchone()[0]
    c.execute("SELECT health FROM fighter_stats WHERE user_id = ?", (player_id,))
    max_health = c.fetchone()[0]
    c.execute("SELECT player1_id, player1_health, player1_stamina, player2_id, player2_health, player2_stamina FROM matches WHERE match_id = ?", (match_id,))
    match = c.fetchone()
    p1_id, p1_health, p1_stamina, p2_id, p2_health, p2_stamina = match
    
    await bot.send_message(player_id, f"–¢–∏ –≤–ø–∞–≤! –ß–∏ –∑–º–æ–∂–µ—à –≤—Å—Ç–∞—Ç–∏?")
    await bot.send_message(opponent_id, f"{player_name} –≤–ø–∞–≤! –ß–∏ –≤—Å—Ç–∞–Ω–µ –≤—ñ–Ω?")
    
    # –§–æ—Ä–º—É–ª–∞ —à–∞–Ω—Å—É –≤—Å—Ç–∞–≤–∞–Ω–Ω—è: 0.4 * will
    stand_chance = 0.4 * will
    if random.random() < stand_chance:
        if player_id == p1_id:
            p1_health = max(0.2 * max_health, p1_health)  # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ 20% –∑–¥–æ—Ä–æ–≤‚Äô—è, —è–∫—â–æ –∑–¥–æ—Ä–æ–≤‚Äô—è –±—É–ª–æ 0
            p1_stamina = min(p1_stamina + 40, 100)
            c.execute(
                "UPDATE matches SET player1_health = ?, player1_stamina = ? WHERE match_id = ?",
                (p1_health, p1_stamina, match_id)
            )
        else:
            p2_health = max(0.2 * max_health, p2_health)
            p2_stamina = min(p2_stamina + 40, 100)
            c.execute(
                "UPDATE matches SET player2_health = ?, player2_stamina = ? WHERE match_id = ?",
                (p2_health, p2_stamina, match_id)
            )
        c.execute("DELETE FROM knockdowns WHERE match_id = ? AND player_id = ?", (match_id, player_id))
        conn.commit()
        await bot.send_message(
            player_id,
            f"–¢–∏ –≤—Å—Ç–∞–≤ –ø—ñ—Å–ª—è –Ω–æ–∫–¥–∞—É–Ω—É! –ó–¥–æ—Ä–æ–≤‚Äô—è: {p1_health if player_id == p1_id else p2_health:.1f}, –ï–Ω–µ—Ä–≥—ñ—è: {p1_stamina if player_id == p1_id else p2_stamina:.1f}"
        )
        await bot.send_message(
            opponent_id,
            f"{player_name} –≤—Å—Ç–∞–≤ –ø—ñ—Å–ª—è –Ω–æ–∫–¥–∞—É–Ω—É! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –±—ñ–π!"
        )
        conn.close()
        await send_fight_message(match_id)
        return
    
    c.execute("DELETE FROM knockdowns WHERE match_id = ? AND player_id = ?", (match_id, player_id))
    conn.commit()
    conn.close()
    await end_match(match_id, player_id, opponent_id, p1_health, p2_health)

# –û–±—Ä–æ–±–∫–∞ —Ä–∞—É–Ω–¥—É
async def process_round(match_id, timed_out=False):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute(
        """SELECT player1_id, player2_id, player1_action, player2_action, player1_health, player1_stamina,
        player2_health, player2_stamina, current_round, start_time, distance FROM matches WHERE match_id = ?""",
        (match_id,)
    )
    match = c.fetchone()
    player1_id, player2_id, p1_action, p2_action, p1_health, p1_stamina, p2_health, p2_stamina, round_num, start_time, distance = match
    
    c.execute("SELECT character_name, fighter_type FROM users WHERE user_id = ?", (player1_id,))
    p1_name, p1_type = c.fetchone()
    c.execute("SELECT character_name, fighter_type FROM users WHERE user_id = ?", (player2_id,))
    p2_name, p2_type = c.fetchone()
    
    c.execute("SELECT strength, reaction, punch_speed, stamina, health, will, footwork FROM fighter_stats WHERE user_id = ?", (player1_id,))
    p1_stats = c.fetchone()
    p1_strength, p1_reaction, p1_punch_speed, p1_stamina_stat, p1_max_health, p1_will, p1_footwork = p1_stats
    c.execute("SELECT strength, reaction, punch_speed, stamina, health, will, footwork FROM fighter_stats WHERE user_id = ?", (player2_id,))
    p2_stats = c.fetchone()
    p2_strength, p2_reaction, p2_punch_speed, p2_stamina_stat, p2_max_health, p2_will, p2_footwork = p2_stats
    
    if time.time() > start_time + 180:
        await end_match(match_id, None, None, p1_health, p2_health)
        logger.debug(f"Match {match_id} ended due to time limit")
        conn.close()
        return
    
    result_text = f"–†–∞—É–Ω–¥ {round_num}\n"
    
    if timed_out:
        p1_action = "rest"
        p2_action = "rest"
        result_text += "–ß–∞—Å –º–∏–Ω—É–≤! –û–±–∏–¥–≤–∞ –≥—Ä–∞–≤—Ü—ñ –≤—ñ–¥–ø–æ—á–∏–≤–∞—é—Ç—å.\n"
    
    attack_params = {
        "jab": {"base_damage": 10, "stamina_cost": 6, "base_hit_chance": 0.9},
        "uppercut": {"base_damage": 25, "stamina_cost": 19, "base_hit_chance": 0.6},
        "hook": {"base_damage": 19, "stamina_cost": 15, "base_hit_chance": 0.75}
    }
    
    p1_action_result = ""
    p2_action_result = ""
    new_distance = distance
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é
    logger.debug(f"Before round {round_num} for match {match_id}:")
    logger.debug(f"Player 1 ({p1_name}) health: {p1_health:.1f}/{p1_max_health:.1f}, stamina: {p1_stamina:.1f}, action: {p1_action}")
    logger.debug(f"Player 2 ({p2_name}) health: {p2_health:.1f}/{p2_max_health:.1f}, stamina: {p2_stamina:.1f}, action: {p2_action}")
    
    # –û–±—Ä–æ–±–∫–∞ –¥—ñ–π —Ä—É—Ö—É
    if p1_action == "move_closer" and random.random() < 0.4 * p1_footwork:
        new_distance = "close"
        result_text += f"{p1_name} –Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è –¥–æ {p2_name}!\n"
        p1_action_result = "–¢–∏ –Ω–∞–±–ª–∏–∑–∏–≤—Å—è!"
        p1_stamina -= 5
    elif p1_action == "move_away":
        if random.random() < 0.1:
            new_distance = "cornered_p1"
            result_text += f"{p1_name} –≤—ñ–¥—Å—Ç—É–ø–∞—î, –∞–ª–µ –ø–æ—Ç—Ä–∞–ø–ª—è—î –≤ –∫—É—Ç!\n"
            p1_action_result = "–¢–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É –∫—É—Ç!"
        elif random.random() < 0.4 * p1_footwork:
            new_distance = "far"
            result_text += f"{p1_name} –≤—ñ–¥—Å—Ç—É–ø–∞—î –≤—ñ–¥ {p2_name}!\n"
            p1_action_result = "–¢–∏ –≤—ñ–¥—Å—Ç—É–ø–∏–≤!"
        else:
            result_text += f"{p1_name} –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Å—Ç—É–ø–∏—Ç–∏!\n"
            p1_action_result = "–í—ñ–¥—Å—Ç—É–ø –Ω–µ –≤–¥–∞–≤—Å—è!"
        p1_stamina -= 5
    
    if p2_action == "move_closer" and random.random() < 0.4 * p2_footwork:
        new_distance = "close"
        result_text += f"{p2_name} –Ω–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è –¥–æ {p1_name}!\n"
        p2_action_result = "–¢–∏ –Ω–∞–±–ª–∏–∑–∏–≤—Å—è!"
        p2_stamina -= 5
    elif p2_action == "move_away":
        if random.random() < 0.1:
            new_distance = "cornered_p2"
            result_text += f"{p2_name} –≤—ñ–¥—Å—Ç—É–ø–∞—î, –∞–ª–µ –ø–æ—Ç—Ä–∞–ø–ª—è—î –≤ –∫—É—Ç!\n"
            p2_action_result = "–¢–∏ –ø–æ—Ç—Ä–∞–ø–∏–≤ —É –∫—É—Ç!"
        elif random.random() < 0.4 * p2_footwork:
            new_distance = "far"
            result_text += f"{p2_name} –≤—ñ–¥—Å—Ç—É–ø–∞—î –≤—ñ–¥ {p1_name}!\n"
            p2_action_result = "–¢–∏ –≤—ñ–¥—Å—Ç—É–ø–∏–≤!"
        else:
            result_text += f"{p2_name} –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥—Å—Ç—É–ø–∏—Ç–∏!\n"
            p2_action_result = "–í—ñ–¥—Å—Ç—É–ø –Ω–µ –≤–¥–∞–≤—Å—è!"
        p2_stamina -= 5
    
    # –û–±—Ä–æ–±–∫–∞ –¥—ñ—ó –ì—Ä–∞–≤—Ü—è 1
    if p1_action in attack_params:
        params = attack_params[p1_action]
        hit_chance = params["base_hit_chance"] * (p1_reaction * p1_punch_speed / 2)
        if new_distance == "cornered_p2":
            hit_chance *= 1.1
        p1_stamina -= params["stamina_cost"]
        if p2_action not in ["dodge", "block"] and random.random() < hit_chance:
            if p1_action == "jab" and new_distance in ["far", "cornered_p1", "cornered_p2"]:
                damage = params["base_damage"] * p1_strength * p1_punch_speed
            else:
                damage = params["base_damage"] * p1_strength
            if p2_action == "move_away":
                damage /= 4
                result_text += f"{p1_name} –∑–∞–≤–¥–∞—î {p1_action} –ø–æ {p2_name}, –∞–ª–µ —Ç–æ–π –≤—ñ–¥—Å—Ç—É–ø–∞—î! –£—Ä–æ–Ω: {damage:.1f}\n"
            else:
                result_text += f"{p1_name} –∑–∞–≤–¥–∞—î {p1_action} –ø–æ {p2_name}! –£—Ä–æ–Ω: {damage:.1f}\n"
            p2_health -= damage
            p2_stamina -= damage / 10
            p1_action_result = "–¢–∏ –≤–ª—É—á–∏–≤!"
            logger.debug(f"Player 1 dealt {damage:.1f} damage to Player 2 with {p1_action}, reduced stamina by {damage/10:.1f}")
        elif p2_action == "block":
            block_success_chance = (0.4 * p2_strength) * (p2_health / p2_max_health)
            p2_stamina -= 5
            if random.random() < block_success_chance:
                damage = 0.1 * params["base_damage"] * p1_strength
                result_text += f"{p1_name} –∑–∞–≤–¥–∞—î {p1_action}, –∞–ª–µ {p2_name} —É—Å–ø—ñ—à–Ω–æ –±–ª–æ–∫—É—î! –£—Ä–æ–Ω: {damage:.1f}\n"
                p1_action_result = "–¢–∏ –≤–ª—É—á–∏–≤, –∞–ª–µ —Å—É–ø–µ—Ä–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤!"
                p2_action_result = "–¢–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤!"
                p2_health -= damage
                p2_stamina -= damage / 10
                logger.debug(f"Player 2 blocked, reduced damage: {damage:.1f}, stamina: {damage/10:.1f}")
            else:
                damage = 0.8 * params["base_damage"] * p1_strength
                result_text += f"{p1_name} –∑–∞–≤–¥–∞—î {p1_action}, –∞–ª–µ {p2_name} –Ω–µ–≤–¥–∞–ª–æ –±–ª–æ–∫—É—î! –£—Ä–æ–Ω: {damage:.1f}\n"
                p1_action_result = "–¢–∏ –≤–ª—É—á–∏–≤, —Å—É–ø–µ—Ä–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤!"
                p2_action_result = "–¢–≤—ñ–π –±–ª–æ–∫ –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è!"
                p2_health -= damage
                p2_stamina -= damage / 10
                logger.debug(f"Player 2 failed block, damage: {damage:.1f}, stamina: {damage/10:.1f}")
        elif p2_action == "dodge":
            dodge_chance = min(0.8, 0.4 * p2_reaction * p2_punch_speed)
            p2_stamina -= 10
            if random.random() < dodge_chance:
                result_text += f"{p1_name} –∑–∞–≤–¥–∞—î {p1_action}, –∞–ª–µ {p2_name} —É—Ö–∏–ª–∏–≤—Å—è!\n"
                p1_action_result = "–¢–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è!"
                p2_action_result = "–¢–∏ —É—Ö–∏–ª–∏–≤—Å—è!"
                logger.debug(f"Player 2 dodged Player 1's {p1_action}")
                if new_distance == "close" and p2_type == "counter_puncher" and random.random() < 0.5:
                    counter_damage = params["base_damage"] * p2_strength * 1.5
                    p1_health -= counter_damage
                    p1_stamina -= counter_damage / 10
                    result_text += f"{p2_name} –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É—î –ø—ñ—Å–ª—è —É—Ö–∏–ª–µ–Ω–Ω—è! –£—Ä–æ–Ω: {counter_damage:.1f}\n"
                    logger.debug(f"Player 2 counter-attacked, critical damage: {counter_damage:.1f}, stamina: {counter_damage/10:.1f}")
            else:
                if p1_action == "jab" and new_distance in ["far", "cornered_p1", "cornered_p2"]:
                    damage = params["base_damage"] * p1_strength * p1_punch_speed
                else:
                    damage = params["base_damage"] * p1_strength
                p2_health -= damage
                p2_stamina -= damage / 10
                result_text += f"{p1_name} –∑–∞–≤–¥–∞—î {p1_action} –ø–æ {p2_name}! –£—Ö–∏–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –£—Ä–æ–Ω: {damage:.1f}\n"
                p1_action_result = "–¢–∏ –≤–ª—É—á–∏–≤!"
                p2_action_result = "–£—Ö–∏–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è!"
                logger.debug(f"Player 2 failed dodge, damage: {damage:.1f}, stamina: {damage/10:.1f}")
    elif p1_action == "dodge":
        p1_stamina -= 10
        result_text += f"{p1_name} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —É—Ö–∏–ª–∏—Ç–∏—Å—è.\n"
        p1_action_result = "–¢–∏ –Ω–∞–º–∞–≥–∞–≤—Å—è —É—Ö–∏–ª–∏—Ç–∏—Å—è."
        logger.debug(f"Player 1 attempted dodge")
    elif p1_action == "block":
        p1_stamina -= 5
        result_text += f"{p1_name} –±–ª–æ–∫—É—î.\n"
        p1_action_result = "–¢–∏ –±–ª–æ–∫—É—î—à."
        logger.debug(f"Player 1 blocked")
    elif p1_action == "rest":
        p1_stamina = min(p1_stamina + 30 * p1_stamina_stat, 100)
        result_text += f"{p1_name} –≤—ñ–¥–ø–æ—á–∏–≤–∞—î.\n"
        p1_action_result = "–¢–∏ –≤—ñ–¥–ø–æ—á–∏–≤–∞—î—à."
        logger.debug(f"Player 1 rested, stamina: {p1_stamina:.1f}")
    
    # –û–±—Ä–æ–±–∫–∞ –¥—ñ—ó –ì—Ä–∞–≤—Ü—è 2
    if p2_action in attack_params:
        params = attack_params[p2_action]
        hit_chance = params["base_hit_chance"] * (p2_reaction * p2_punch_speed / 2)
        if new_distance == "cornered_p1":
            hit_chance *= 1.1
        p2_stamina -= params["stamina_cost"]
        if p1_action not in ["dodge", "block"] and random.random() < hit_chance:
            if p2_action == "jab" and new_distance in ["far", "cornered_p1", "cornered_p2"]:
                damage = params["base_damage"] * p2_strength * p2_punch_speed
            else:
                damage = params["base_damage"] * p2_strength
            if p1_action == "move_away":
                damage /= 4
                result_text += f"{p2_name} –∑–∞–≤–¥–∞—î {p2_action} –ø–æ {p1_name}, –∞–ª–µ —Ç–æ–π –≤—ñ–¥—Å—Ç—É–ø–∞—î! –£—Ä–æ–Ω: {damage:.1f}\n"
            else:
                result_text += f"{p2_name} –∑–∞–≤–¥–∞—î {p2_action} –ø–æ {p1_name}! –£—Ä–æ–Ω: {damage:.1f}\n"
            p1_health -= damage
            p1_stamina -= damage / 10
            p2_action_result = "–¢–∏ –≤–ª—É—á–∏–≤!"
            logger.debug(f"Player 2 dealt {damage:.1f} damage to Player 1 with {p2_action}, reduced stamina by {damage/10:.1f}")
        elif p1_action == "block":
            block_success_chance = (0.4 * p1_strength) * (p1_health / p1_max_health)
            p1_stamina -= 5
            if random.random() < block_success_chance:
                damage = 0.1 * params["base_damage"] * p2_strength
                result_text += f"{p2_name} –∑–∞–≤–¥–∞—î {p2_action}, –∞–ª–µ {p1_name} —É—Å–ø—ñ—à–Ω–æ –±–ª–æ–∫—É—î! –£—Ä–æ–Ω: {damage:.1f}\n"
                p2_action_result = "–¢–∏ –≤–ª—É—á–∏–≤, –∞–ª–µ —Å—É–ø–µ—Ä–Ω–∏–∫ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤!"
                p1_action_result = "–¢–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤!"
                p1_health -= damage
                p1_stamina -= damage / 10
                logger.debug(f"Player 1 blocked, reduced damage: {damage:.1f}, stamina: {damage/10:.1f}")
            else:
                damage = 0.8 * params["base_damage"] * p2_strength
                result_text += f"{p2_name} –∑–∞–≤–¥–∞—î {p2_action}, –∞–ª–µ {p1_name} –Ω–µ–≤–¥–∞–ª–æ –±–ª–æ–∫—É—î! –£—Ä–æ–Ω: {damage:.1f}\n"
                p2_action_result = "–¢–∏ –≤–ª—É—á–∏–≤, —Å—É–ø–µ—Ä–Ω–∏–∫ –Ω–µ–≤–¥–∞–ª–æ –∑–∞–±–ª–æ–∫—É–≤–∞–≤!"
                p1_action_result = "–¢–≤—ñ–π –±–ª–æ–∫ –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è!"
                p1_health -= damage
                p1_stamina -= damage / 10
                logger.debug(f"Player 1 failed block, damage: {damage:.1f}, stamina: {damage/10:.1f}")
        elif p1_action == "dodge":
            dodge_chance = min(0.8, 0.4 * p1_reaction * p1_punch_speed)
            p1_stamina -= 10
            if random.random() < dodge_chance:
                result_text += f"{p2_name} –∑–∞–≤–¥–∞—î {p2_action}, –∞–ª–µ {p1_name} —É—Ö–∏–ª–∏–≤—Å—è!\n"
                p2_action_result = "–¢–∏ –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è!"
                p1_action_result = "–¢–∏ —É—Ö–∏–ª–∏–≤—Å—è!"
                logger.debug(f"Player 1 dodged Player 2's {p2_action}")
                if new_distance == "close" and p1_type == "counter_puncher" and random.random() < 0.5:
                    counter_damage = params["base_damage"] * p1_strength * 1.5
                    p2_health -= counter_damage
                    p2_stamina -= counter_damage / 10
                    result_text += f"{p1_name} –∫–æ–Ω—Ç—Ä–∞—Ç–∞–∫—É—î –ø—ñ—Å–ª—è —É—Ö–∏–ª–µ–Ω–Ω—è! –£—Ä–æ–Ω: {counter_damage:.1f}\n"
                    logger.debug(f"Player 1 counter-attacked, critical damage: {counter_damage:.1f}, stamina: {counter_damage/10:.1f}")
            else:
                if p2_action == "jab" and new_distance in ["far", "cornered_p1", "cornered_p2"]:
                    damage = params["base_damage"] * p2_strength * p2_punch_speed
                else:
                    damage = params["base_damage"] * p2_strength
                p1_health -= damage
                p1_stamina -= damage / 10
                result_text += f"{p2_name} –∑–∞–≤–¥–∞—î {p2_action} –ø–æ {p1_name}! –£—Ö–∏–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –£—Ä–æ–Ω: {damage:.1f}\n"
                p2_action_result = "–¢–∏ –≤–ª—É—á–∏–≤!"
                p1_action_result = "–£—Ö–∏–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è!"
                logger.debug(f"Player 1 failed dodge, damage: {damage:.1f}, stamina: {damage/10:.1f}")
    elif p2_action == "dodge":
        p2_stamina -= 10
        result_text += f"{p2_name} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —É—Ö–∏–ª–∏—Ç–∏—Å—è.\n"
        p2_action_result = "–¢–∏ –Ω–∞–º–∞–≥–∞–≤—Å—è —É—Ö–∏–ª–∏—Ç–∏—Å—è."
        logger.debug(f"Player 2 attempted dodge")
    elif p2_action == "block":
        p2_stamina -= 5
        result_text += f"{p2_name} –±–ª–æ–∫—É—î.\n"
        p2_action_result = "–¢–∏ –±–ª–æ–∫—É—î—à."
        logger.debug(f"Player 2 blocked")
    elif p2_action == "rest":
        p2_stamina = min(p2_stamina + 30 * p2_stamina_stat, 100)
        result_text += f"{p2_name} –≤—ñ–¥–ø–æ—á–∏–≤–∞—î.\n"
        p2_action_result = "–¢–∏ –≤—ñ–¥–ø–æ—á–∏–≤–∞—î—à."
        logger.debug(f"Player 2 rested, stamina: {p2_stamina:.1f}")
    
    # –û–±–º–µ–∂–µ–Ω–Ω—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤‚Äô—è —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—ó
    p1_health = max(0, p1_health)
    p2_health = max(0, p2_health)
    p1_stamina = max(0, p1_stamina)
    p2_stamina = max(0, p2_stamina)
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥—ñ–π
    if p1_action_result:
        await bot.send_message(player1_id, p1_action_result)
    if p2_action_result:
        await bot.send_message(player2_id, p2_action_result)
    
    # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏
    logger.debug(f"After round {round_num} for match {match_id}:")
    logger.debug(f"Player 1 ({p1_name}) health: {p1_health:.1f}/{p1_max_health:.1f}, stamina: {p1_stamina:.1f}")
    logger.debug(f"Player 2 ({p2_name}) health: {p2_health:.1f}/{p2_max_health:.1f}, stamina: {p2_stamina:.1f}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–∫–¥–∞—É–Ω—É –ø—Ä–∏ –Ω—É–ª—å–æ–≤—ñ–π –µ–Ω–µ—Ä–≥—ñ—ó –∞–±–æ –∑–¥–æ—Ä–æ–≤‚Äô—ó
    if p1_health <= 0 and p2_health <= 0:
        await end_match(match_id, None, None, p1_health, p2_health)
        conn.close()
        return
    elif p1_health <= 0 or p1_stamina <= 0:
        await handle_knockdown(match_id, player1_id, player2_id, p1_name, p2_name)
        conn.close()
        return
    elif p2_health <= 0 or p2_stamina <= 0:
        await handle_knockdown(match_id, player2_id, player1_id, p2_name, p1_name)
        conn.close()
        return
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    new_deadline = time.time() + 30
    c.execute(
        """UPDATE matches SET player1_health = ?, player1_stamina = ?, player2_health = ?, player2_stamina = ?,
        player1_action = NULL, player2_action = NULL, current_round = ?, action_deadline = ?, distance = ? WHERE match_id = ?""",
        (p1_health, p1_stamina, p2_health, p2_stamina, round_num + 1, new_deadline, new_distance, match_id)
    )
    conn.commit()
    
    p1_status_text = get_status_text(p1_name, p1_type, p1_health, p1_stamina, p1_max_health)
    p2_status_text = get_status_text(p2_name, p2_type, p2_health, p2_stamina, p2_max_health)
    
    distance_text = {
        "far": "–î–∞–ª–µ–∫–æ",
        "close": "–ë–ª–∏–∑—å–∫–æ",
        "cornered_p1": f"{p1_name} —É –∫—É—Ç—ñ!",
        "cornered_p2": f"{p2_name} —É –∫—É—Ç—ñ!"
    }[new_distance]
    
    await bot.send_message(
        player1_id,
        f"{result_text}\n–î–∏—Å—Ç–∞–Ω—Ü—ñ—è: {distance_text}\n{p1_status_text}\n{p2_status_text}\n–û–±–µ—Ä–∏ –¥—ñ—é (30 —Å–µ–∫—É–Ω–¥):",
        reply_markup=get_fight_keyboard(match_id, new_distance)
    )
    await bot.send_message(
        player2_id,
        f"{result_text}\n–î–∏—Å—Ç–∞–Ω—Ü—ñ—è: {distance_text}\n{p2_status_text}\n{p1_status_text}\n–û–±–µ—Ä–∏ –¥—ñ—é (30 —Å–µ–∫—É–Ω–¥):",
        reply_markup=get_fight_keyboard(match_id, new_distance)
    )
    logger.debug(f"Processed round {round_num} for match {match_id}")
    
    conn.close()

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º–∞—Ç—á—É
async def end_match(match_id, loser_id, winner_id, p1_health, p2_health):
    conn = sqlite3.connect("bot.db")
    c = conn.cursor()
    c.execute(
        """SELECT player1_id, player2_id, current_round FROM matches WHERE match_id = ?""",
        (match_id,)
    )
    match = c.fetchone()
    if not match:
        logger.error(f"Match {match_id} not found for end_match")
        conn.close()
        return
    
    player1_id, player2_id, round_num = match
    c.execute("SELECT character_name FROM users WHERE user_id = ?", (player1_id,))
    p1_name = c.fetchone()[0]
    c.execute("SELECT character_name FROM users WHERE user_id = ?", (player2_id,))
    p2_name = c.fetchone()[0]
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    if loser_id is None and winner_id is None:
        if p1_health > p2_health:
            winner_id, loser_id = player1_id, player2_id
            result_text = f"–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—ñ—Å–ª—è {round_num} —Ä–∞—É–Ω–¥—ñ–≤! –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {p1_name} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤‚Äô—è: {p1_health:.1f})!"
        elif p2_health > p1_health:
            winner_id, loser_id = player2_id, player1_id
            result_text = f"–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—ñ—Å–ª—è {round_num} —Ä–∞—É–Ω–¥—ñ–≤! –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {p2_name} (–∑–∞–ª–∏—à–∏–ª–æ—Å—å –∑–¥–æ—Ä–æ–≤‚Äô—è: {p2_health:.1f})!"
        else:
            result_text = f"–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—ñ—Å–ª—è {round_num} —Ä–∞—É–Ω–¥—ñ–≤! –ù—ñ—á–∏—è!"
    elif loser_id == player1_id:
        result_text = f"–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ! {p1_name} –ø—Ä–æ–≥—Ä–∞–≤ —á–µ—Ä–µ–∑ –Ω–æ–∫–∞—É—Ç! –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {p2_name}!"
    elif loser_id == player2_id:
        result_text = f"–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω–æ! {p2_name} –ø—Ä–æ–≥—Ä–∞–≤ —á–µ—Ä–µ–∑ –Ω–æ–∫–∞—É—Ç! –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {p1_name}!"
    
    # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–∞—Ç—á—É
    c.execute("UPDATE matches SET status = 'finished' WHERE match_id = ?", (match_id,))
    c.execute("DELETE FROM knockdowns WHERE match_id = ?", (match_id,))
    c.execute("UPDATE rooms SET status = 'finished' WHERE creator_id = ? OR opponent_id = ?", (player1_id, player2_id))
    conn.commit()
    conn.close()
    
    # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await bot.send_message(player1_id, result_text)
    await bot.send_message(player2_id, result_text)
    logger.debug(f"Match {match_id} ended: {result_text}")

# –ö–æ–º–∞–Ω–¥–∏ –∞–¥–º—ñ–Ω—ñ–≤
@dp.message(Command("admin_setting"))
async def admin_setting(message: types.Message, state: FSMContext):
    logger.debug(f"Received /admin_setting from user {message.from_user.id}")
    await reset_state(message, state)
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!")
        logger.debug(f"Unauthorized admin access attempt by user {message.from_user.id}")
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–£–≤—ñ–º–∫–Ω—É—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="maintenance_on")],
        [InlineKeyboardButton(text="–í–∏–º–∫–Ω—É—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏", callback_data="maintenance_off")],
    ])
    await message.reply("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=keyboard)
    logger.debug(f"Admin panel opened for user {message.from_user.id}")

@dp.callback_query(lambda c: c.data in ["maintenance_on", "maintenance_off"])
async def handle_admin_action(callback: types.CallbackQuery):
    logger.debug(f"Received admin action from user {callback.from_user.id}: {callback.data}")
    if callback.from_user.id not in ADMIN_IDS:
        await callback.message.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!")
        logger.debug(f"Unauthorized admin action attempt by user {callback.from_user.id}")
        await callback.answer()
        return
    
    global maintenance_mode
    if callback.data == "maintenance_on":
        maintenance_mode = True
        await callback.message.reply("–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ –¥–ª—è –≤—Å—ñ—Ö, –∫—Ä—ñ–º –∞–¥–º—ñ–Ω—ñ–≤.")
        logger.info("Maintenance mode enabled")
    else:
        maintenance_mode = False
        await callback.message.reply("–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–æ. –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö.")
        logger.info("Maintenance mode disabled")
    
    await callback.answer()

@dp.message(Command("maintenance_on"))
async def maintenance_on(message: types.Message, state: FSMContext):
    logger.debug(f"Received /maintenance_on from user {message.from_user.id}")
    await reset_state(message, state)
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        logger.debug(f"Unauthorized /maintenance_on attempt by user {message.from_user.id}")
        return
    global maintenance_mode
    maintenance_mode = True
    await message.reply("–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ –¥–ª—è –≤—Å—ñ—Ö, –∫—Ä—ñ–º –∞–¥–º—ñ–Ω—ñ–≤.")
    logger.info("Maintenance mode enabled")

@dp.message(Command("maintenance_off"))
async def maintenance_off(message: types.Message, state: FSMContext):
    logger.debug(f"Received /maintenance_off from user {message.from_user.id}")
    await reset_state(message, state)
    if message.from_user.id not in ADMIN_IDS:
        await message.reply("–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏!")
        logger.debug(f"Unauthorized /maintenance_off attempt by user {message.from_user.id}")
        return
    global maintenance_mode
    maintenance_mode = False
    await message.reply("–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–æ–±–æ—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–æ. –ë–æ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π –¥–ª—è –≤—Å—ñ—Ö.")
    logger.info("Maintenance mode disabled")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
async def on_startup():
    await setup_bot_commands()
    webhook_url = f"https://box-manager-bot.onrender.com/webhook/{TELEGRAM_TOKEN}"
    await bot.set_webhook(webhook_url)
    logger.info(f"Webhook set to {webhook_url}")

async def on_shutdown():
    await bot.delete_webhook()
    await storage.close()
    await bot.session.close()
    logger.info("Bot shutdown")

# –û–±—Ä–æ–±–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def handle_webhook(request):
    update = types.Update(**(await request.json()))
    await dp.feed_update(bot, update)
    return web.Response()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        app = web.Application()
        app.router.add_post(f"/webhook/{TELEGRAM_TOKEN}", handle_webhook)
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ä—Ç—É —Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
        app.on_startup.append(lambda _: on_startup())
        app.on_shutdown.append(lambda _: on_shutdown())
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        port = int(os.getenv("PORT", 10000))  # Render –ø–µ—Ä–µ–¥–∞—î –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É PORT
        site = web.TCPSite(runner, '0.0.0.0', port)
        await site.start()
        logger.info(f"Server started on port {port}")
        
        # –£—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ –≤ —Ä–æ–±–æ—á–æ–º—É —Å—Ç–∞–Ω—ñ
        await asyncio.Event().wait()
    except Exception as e:
        logger.error(f"Error in main: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")
    except Exception as e:
        logger.error(f"Fatal error: {e}")